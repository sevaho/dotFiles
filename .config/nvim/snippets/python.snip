snippet     func
abbr        function
options     head
    def ${1:name} (${2:#:params}):
        ${3:code}

snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:name}(${2:object}):
		def __init__(self):
			${3:pass}

snippet     tryexcept
abbr        try: ... except ...: ...
options     head
	try:
		${1:pass}
    except Exception as e:
		${3:pass}

snippet     imp
abbr        import
options     head
    import ${1:socket}

snippet     ifelse
abbr        ifelse
options     head
    if (${1:#:test}):
        ${2:#:test}
    else:
        ${3:#:test}

snippet     tcp
abbr        tcp
options     head
    ${1:server} = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
snippet     testtt
abbr        bb
options     head
    test

snippet     bumba
abbr        bb
options     head
    test

snippet     read_file
abbr        read_file
options     head
    with open("${1:file.txt}", encoding="utf-8") as file:
        return file.readlines()

snippet     write_file
abbr        write_file
options     head
    with open("${1:file.txt}", "w", encoding="utf-8") as file:
        file.write()

snippet     read_json
abbr        read_json
options     head
    with open("${1:file.txt}", encoding="utf-8") as file:
        return json.load(file)

snippet     pprint
abbr        pprint
options     head
    __import__("pprint").pprint(${1:object})

snippet     write__json_file
abbr        write_json_file
options     head
    with open("${1:file.txt}", "w", encoding="utf-8") as file:
        json.dump(${2:data}, file, ensure_ascii=False, indent=4)

snippet     threading
abbr        threading
options     head
    from threading import Thread, RLock

    thread = Thread(target=${1:function}, args=())
    thread.start()
    thread.join()

    lock = RLock()
    lock.acquire()
    lock.release()


snippet     sanic_example
abbr        sanic_example
options     head
    from sanic import Sanic
    from sanic import response

    app = Sanic(__name__)


    @app.get("/")
    async def index(request):
        print(request)
        return response.json({"status": 1})


    if __name__ == "__main__":

        app.run(
            host="127.0.0.1",
            port=5000,
            workers=1,
            debug=False,
            access_log=True,
            auto_reload=True,
        )

snippet     async_request
abbr        asyc_request
options     head
    async with aiohttp.ClientSession(auth=auth) as session:
        async with session.get(
            f"${1:url}",
            data=data,
        ) as resp:
            data = await resp.json()
