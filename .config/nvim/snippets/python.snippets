snippet auth "wegroup auth"
	import requests
	HOST = "https://api.phoenix.dev.qa.wegroup.be"
	DEFAULT_TYPE = "application/vnd.api+json"
	headers = {"content-type": DEFAULT_TYPE, "Accept": DEFAULT_TYPE}
	path = "/v1/api/aut/v1/api/auth"
	payload = {"email": "admin@wegroup.be", "password": "${1:password}"}
	r = requests.post(HOST + path, headers=headers, json=payload)
	print(r.json())
	access_token = r.json()["access_token"]
	refresh_token = r.json()["refresh_token"]
	headers["authorization"] = f"Bearer {access_token}"
	print(headers)
snippet tstart "time start"
	t0 = time.time()
snippet tend "time end"
	print(f"time took: {time.time() - t0}")
snippet pf "print formatted"
	print(f"${1:header}")
snippet headers "headers"
	DEFAULT_TYPE = "application/vnd.api+json"
	HEADERS = {
		"content-type": DEFAULT_TYPE,
		"Accept": DEFAULT_TYPE,
	}
snippet sanic "sanic example app"
	import sanic

	app = sanic.Sanic()


	@app.get("/")
	async def index(request):
		return sanic.response.json({})


	if __name__ == "__main__":

		app.run(
			host="127.0.0.1",
			port=5000,
			workers=1,
			debug=False,
			access_log=True,
			auto_reload=True,
		)
snippet linfo "logger info"
	logger.info(f"${1:header}")
snippet lerror "logger error"
	logger.error(f"${1:header}")
snippet ldebug "logger debug"
	logger.debug(f"${1:header}")
snippet globalconfig "Pydantic Global Config"
	class GlobalConfig:
		validate_assignment = True
		validate_all = True
		use_enum_values = True
snippet glcfg "Pydantic Global Config"
	class GlobalConfig:
		validate_assignment = True
		validate_all = True
		use_enum_values = True
snippet class_pydatnic "Pydantic class"
	@dataclass(config=GlobalConfig)
	class ${1:class}(object):
		${2:attr}
		def json(self):
			return json.loads(json.dumps(asdict(self), cls=Encoder))

		def dumps(self):
			return json.dumps(asdict(self), cls=Encoder)

snippet amain "Async main"
	import asyncio

	async def main():
		"""${1:TODO: Docstring for main.}"""
		${2:# code}
		pass


	if __name__ == "__main__":
		asyncio.run(main())

snippet aread "Async read file"
	import aiofiles

	async with aiofiles.open(f"${1:filename}", "${2:r}") as f:
		${3:data = await f.read()}
		# ${3:data = await f.read()}

snippet awrite "Async write file"
	import aiofiles

	async with aiofiles.open(f"${1:filename}", "${2:w}") as f:
		await f.write(str("\n").join(${2:data}))

snippet areq "Async request"
	import aiohttp

	async with aiohttp.ClientSession(${1:headers=headers, cookies=cookies}) as session:
		async with session.${2:get}(${3:url}) as resp:
			${4:return await resp}

snippet aiohttp "Async request"
	async with aiohttp.ClientSession(${1:headers=headers, cookies=cookies}) as session:
		async with session.${2:post}(${3:url}, ${4:json=payload}) as resp:
			${4:return await resp}
			status = resp.status
			response = await resp.json()

snippet importdatac "import dataclass"
	from wg_py_models import dataclass, DataClass, GlobalConfig

snippet datac "dataclass"
	from wg_py_models import DataClass, dataclass, GlobalConfig
	@dataclass(config=GlobalConfig)
	class ${1:Class}(DataClass):

snippet jprint "JSON print"
	print(__import__("json").dumps(${1}, indent=4))${2}
